
(function ($) {
    $.fn.pekeUpload = function (options) {
        var defaults = {
            allowedExtensions: "",
            invalidExtError: "Invalid File Type",
            maxSize: 0,
            sizeError: "Size of the file is greather than allowed",
            showErrorAlerts: true,
            errorOnResponse: "There has been an error uploading your file",
            url: "/sshProject/uploadfile",
            data: {},
            limit: 0,
            limitError: "You have reached the limit of files that you can upload",
            delfiletext: "Remove from queue",
            onFileError: function (file, error) { },
            onFileSuccess: function (file, data) { },
            ondata: function (data) { },
            onSelectFileBefore: function () { return true; },
            onFileUploadOver: function () { }
        };
        var options = $.extend(defaults, options);
        var pekeUpload = {
            obj: $(this),
            files: [],
            uparea: null,
            container: null,
            uploadedfiles: 0,
            hasErrors: false,
            init: function () {
                this.replacehtml();
                this.uparea.on("click", function () {
                    pekeUpload.selectfiles();
                });
                this.handlebuttonevents();
            },
            replacehtml: function () {
                html = '<a href="javascript:void(0)"  data-toggle="tooltip" data-placement="bottom" title="upload" class="btn btn-default btn-sm btn-upload"> <i class="glyphicon glyphicon-upload"></i> ' + "</a>";
                this.obj.hide();
                this.uparea = $(html).insertAfter(this.obj);
                this.container = $('<div class="pekecontainer"><ul></ul></div>').insertAfter(this.uparea);
            },
            selectfiles: function () {
                if (options.onSelectFileBefore()) {
                    this.obj.click();
                }
            },
            handlebuttonevents: function () {
                $(document).on("change", this.obj.selector, function () {
                    if (pekeUpload.obj[0].files.length > 0) {
                        for (let i = 0; i < pekeUpload.obj[0].files.length; i++) {
                            pekeUpload.checkFile(pekeUpload.obj[0].files[i]);
                        }
                    }
                    options.ondata(options.data);
                    pekeUpload.upload();
                    //console.dir(pekeUpload.files);
                });
            },

            checkFile: function (file) {
                error = this.validateFile(file);
                if (error) {
                    if (options.showErrorAlerts) {
                        this.addWarning(error);
                    }
                    this.hasErrors = true;
                    options.onFileError(file, error);
                } else {
                    this.files.push(file);
                }
            },
            addWarning: function (error, c) {
                toastr.error(error);
            },
            validateFile: function (file) {
                if (!this.checkExtension(file)) {
                    return options.invalidExtError;
                }
                if (!this.checkSize(file)) {
                    return options.sizeError;
                }
                return null;
            },
            checkExtension: function (file) {
                if (options.allowedExtensions == "") {
                    return true;
                }
                var ext = file.name.split(".").pop().toLowerCase();
                var allowed = options.allowedExtensions.split("|");
                if ($.inArray(ext, allowed) == -1) {
                    return false;
                } else {
                    return true;
                }
            },
            checkSize: function (file) {
                if (options.maxSize == 0) {
                    return true;
                }
                if (file.size > options.maxSize) {
                    return false;
                } else {
                    return true;
                }
            },

            upload: function (pos) {
                pos = pos || 0;
                if (pekeUpload.files.length <= pos) {
                    options.onFileUploadOver();
                    pekeUpload.files=[];
                    return;
                }
                var formData = new FormData();
                var file = pekeUpload.files[pos];
                formData.append("file", file);
                for (var key in options.data) {
                    formData.append(key, options.data[key]);
                }
                $.ajax({
                    url: options.url,
                    type: "POST",
                    data: formData,
                    dataType: "json",
                    success: function (data) {
                        if (data.status == true) {
                            options.onFileSuccess(file, data);
                        } else {
                            var err = null;
                            if (data.error) {
                                err = data.error;
                            } else {
                                err = options.errorOnResponse;
                            }
                            options.onFileError(file, err);
                        }
                        pos++;
                        pekeUpload.upload(pos);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        options.onFileError(file, thrownError);
                    },
                    cache: false,
                    contentType: false,
                    processData: false
                });
            }
        };
        pekeUpload.init();
        return pekeUpload;
    };
})(jQuery);